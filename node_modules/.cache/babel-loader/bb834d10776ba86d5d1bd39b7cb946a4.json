{"ast":null,"code":"(function webpackUniversalModuleDefinition(root, factory) {\n  if (typeof exports === 'object' && typeof module === 'object') module.exports = factory(require(\"react\"), require(\"styled-components\"));else if (typeof define === 'function' && define.amd) define([\"react\", \"styled-components\"], factory);else if (typeof exports === 'object') exports[\"react-typed\"] = factory(require(\"react\"), require(\"styled-components\"));else root[\"react-typed\"] = factory(root[\"React\"], root[undefined]);\n})(this, function (__WEBPACK_EXTERNAL_MODULE_5__, __WEBPACK_EXTERNAL_MODULE_12__) {\n  return (\n    /******/\n    function (modules) {\n      // webpackBootstrap\n\n      /******/\n      // The module cache\n\n      /******/\n      var installedModules = {};\n      /******/\n\n      /******/\n      // The require function\n\n      /******/\n\n      function __webpack_require__(moduleId) {\n        /******/\n\n        /******/\n        // Check if module is in cache\n\n        /******/\n        if (installedModules[moduleId]) {\n          /******/\n          return installedModules[moduleId].exports;\n          /******/\n        }\n        /******/\n        // Create a new module (and put it into the cache)\n\n        /******/\n\n\n        var module = installedModules[moduleId] = {\n          /******/\n          i: moduleId,\n\n          /******/\n          l: false,\n\n          /******/\n          exports: {}\n          /******/\n\n        };\n        /******/\n\n        /******/\n        // Execute the module function\n\n        /******/\n\n        modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n        /******/\n\n        /******/\n        // Flag the module as loaded\n\n        /******/\n\n        module.l = true;\n        /******/\n\n        /******/\n        // Return the exports of the module\n\n        /******/\n\n        return module.exports;\n        /******/\n      }\n      /******/\n\n      /******/\n\n      /******/\n      // expose the modules object (__webpack_modules__)\n\n      /******/\n\n\n      __webpack_require__.m = modules;\n      /******/\n\n      /******/\n      // expose the module cache\n\n      /******/\n\n      __webpack_require__.c = installedModules;\n      /******/\n\n      /******/\n      // define getter function for harmony exports\n\n      /******/\n\n      __webpack_require__.d = function (exports, name, getter) {\n        /******/\n        if (!__webpack_require__.o(exports, name)) {\n          /******/\n          Object.defineProperty(exports, name, {\n            /******/\n            configurable: false,\n\n            /******/\n            enumerable: true,\n\n            /******/\n            get: getter\n            /******/\n\n          });\n          /******/\n        }\n        /******/\n\n      };\n      /******/\n\n      /******/\n      // getDefaultExport function for compatibility with non-harmony modules\n\n      /******/\n\n\n      __webpack_require__.n = function (module) {\n        /******/\n        var getter = module && module.__esModule ?\n        /******/\n        function getDefault() {\n          return module['default'];\n        } :\n        /******/\n        function getModuleExports() {\n          return module;\n        };\n        /******/\n\n        __webpack_require__.d(getter, 'a', getter);\n        /******/\n\n\n        return getter;\n        /******/\n      };\n      /******/\n\n      /******/\n      // Object.prototype.hasOwnProperty.call\n\n      /******/\n\n\n      __webpack_require__.o = function (object, property) {\n        return Object.prototype.hasOwnProperty.call(object, property);\n      };\n      /******/\n\n      /******/\n      // __webpack_public_path__\n\n      /******/\n\n\n      __webpack_require__.p = \"/\";\n      /******/\n\n      /******/\n      // Load entry module and return exports\n\n      /******/\n\n      return __webpack_require__(__webpack_require__.s = 4);\n      /******/\n    }(\n    /************************************************************************/\n\n    /******/\n    [\n    /* 0 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      \"use strict\";\n      /**\n       * Copyright (c) 2013-present, Facebook, Inc.\n       *\n       * This source code is licensed under the MIT license found in the\n       * LICENSE file in the root directory of this source tree.\n       *\n       * \n       */\n\n      function makeEmptyFunction(arg) {\n        return function () {\n          return arg;\n        };\n      }\n      /**\n       * This function accepts and discards inputs; it has no side effects. This is\n       * primarily useful idiomatically for overridable function endpoints which\n       * always need to be callable, since JS lacks a null-call idiom ala Cocoa.\n       */\n\n\n      var emptyFunction = function emptyFunction() {};\n\n      emptyFunction.thatReturns = makeEmptyFunction;\n      emptyFunction.thatReturnsFalse = makeEmptyFunction(false);\n      emptyFunction.thatReturnsTrue = makeEmptyFunction(true);\n      emptyFunction.thatReturnsNull = makeEmptyFunction(null);\n\n      emptyFunction.thatReturnsThis = function () {\n        return this;\n      };\n\n      emptyFunction.thatReturnsArgument = function (arg) {\n        return arg;\n      };\n\n      module.exports = emptyFunction;\n      /***/\n    },\n    /* 1 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      \"use strict\";\n      /**\n       * Copyright (c) 2013-present, Facebook, Inc.\n       *\n       * This source code is licensed under the MIT license found in the\n       * LICENSE file in the root directory of this source tree.\n       *\n       */\n\n      /**\n       * Use invariant() to assert state which your program assumes to be true.\n       *\n       * Provide sprintf-style format (only %s is supported) and arguments\n       * to provide information about what broke and what you were\n       * expecting.\n       *\n       * The invariant message will be stripped in production, but the invariant\n       * will remain to ensure logic does not differ in production.\n       */\n\n      var validateFormat = function validateFormat(format) {};\n\n      if (undefined !== 'production') {\n        validateFormat = function validateFormat(format) {\n          if (format === undefined) {\n            throw new Error('invariant requires an error message argument');\n          }\n        };\n      }\n\n      function invariant(condition, format, a, b, c, d, e, f) {\n        validateFormat(format);\n\n        if (!condition) {\n          var error;\n\n          if (format === undefined) {\n            error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');\n          } else {\n            var args = [a, b, c, d, e, f];\n            var argIndex = 0;\n            error = new Error(format.replace(/%s/g, function () {\n              return args[argIndex++];\n            }));\n            error.name = 'Invariant Violation';\n          }\n\n          error.framesToPop = 1; // we don't care about invariant's own frame\n\n          throw error;\n        }\n      }\n\n      module.exports = invariant;\n      /***/\n    },\n    /* 2 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      \"use strict\";\n      /**\n       * Copyright (c) 2013-present, Facebook, Inc.\n       *\n       * This source code is licensed under the MIT license found in the\n       * LICENSE file in the root directory of this source tree.\n       */\n\n      var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';\n      module.exports = ReactPropTypesSecret;\n      /***/\n    },\n    /* 3 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      \"use strict\";\n      /**\n       * Copyright (c) 2014-present, Facebook, Inc.\n       *\n       * This source code is licensed under the MIT license found in the\n       * LICENSE file in the root directory of this source tree.\n       *\n       */\n\n      var emptyFunction = __webpack_require__(0);\n      /**\n       * Similar to invariant but only logs a warning if the condition is not met.\n       * This can be used to log issues in development environments in critical\n       * paths. Removing the logging code for production environments will keep the\n       * same logic and follow the same code paths.\n       */\n\n\n      var warning = emptyFunction;\n\n      if (undefined !== 'production') {\n        var printWarning = function printWarning(format) {\n          for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n            args[_key - 1] = arguments[_key];\n          }\n\n          var argIndex = 0;\n          var message = 'Warning: ' + format.replace(/%s/g, function () {\n            return args[argIndex++];\n          });\n\n          if (typeof console !== 'undefined') {\n            console.error(message);\n          }\n\n          try {\n            // --- Welcome to debugging React ---\n            // This error was thrown as a convenience so that you can use this stack\n            // to find the callsite that caused this warning to fire.\n            throw new Error(message);\n          } catch (x) {}\n        };\n\n        warning = function warning(condition, format) {\n          if (format === undefined) {\n            throw new Error('`warning(condition, format, ...args)` requires a warning ' + 'message argument');\n          }\n\n          if (format.indexOf('Failed Composite propType: ') === 0) {\n            return; // Ignore CompositeComponent proptype check.\n          }\n\n          if (!condition) {\n            for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {\n              args[_key2 - 2] = arguments[_key2];\n            }\n\n            printWarning.apply(undefined, [format].concat(args));\n          }\n        };\n      }\n\n      module.exports = warning;\n      /***/\n    },\n    /* 4 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      \"use strict\";\n\n      Object.defineProperty(exports, \"__esModule\", {\n        value: true\n      });\n\n      var _createClass = function () {\n        function defineProperties(target, props) {\n          for (var i = 0; i < props.length; i++) {\n            var descriptor = props[i];\n            descriptor.enumerable = descriptor.enumerable || false;\n            descriptor.configurable = true;\n            if (\"value\" in descriptor) descriptor.writable = true;\n            Object.defineProperty(target, descriptor.key, descriptor);\n          }\n        }\n\n        return function (Constructor, protoProps, staticProps) {\n          if (protoProps) defineProperties(Constructor.prototype, protoProps);\n          if (staticProps) defineProperties(Constructor, staticProps);\n          return Constructor;\n        };\n      }();\n\n      var _templateObject = _taggedTemplateLiteral(['\\n    .typed-cursor{\\n        opacity: 1;\\n        animation: typedjsBlink 0.7s infinite;\\n        -webkit-animation: typedjsBlink 0.7s infinite;\\n        animation: typedjsBlink 0.7s infinite;\\n    }\\n    @keyframes typedjsBlink{\\n        50% { opacity: 0.0; }\\n    }\\n    @-webkit-keyframes typedjsBlink{\\n        0% { opacity: 1; }\\n        50% { opacity: 0.0;}\\n        100% { opacity: 1; }\\n    }\\n    .typed-fade-out{\\n        opacity: 0;\\n        transition: opacity .25s;\\n        -webkit-animation: 0;\\n        animation: 0;\\n    }\\n'], ['\\n    .typed-cursor{\\n        opacity: 1;\\n        animation: typedjsBlink 0.7s infinite;\\n        -webkit-animation: typedjsBlink 0.7s infinite;\\n        animation: typedjsBlink 0.7s infinite;\\n    }\\n    @keyframes typedjsBlink{\\n        50% { opacity: 0.0; }\\n    }\\n    @-webkit-keyframes typedjsBlink{\\n        0% { opacity: 1; }\\n        50% { opacity: 0.0;}\\n        100% { opacity: 1; }\\n    }\\n    .typed-fade-out{\\n        opacity: 0;\\n        transition: opacity .25s;\\n        -webkit-animation: 0;\\n        animation: 0;\\n    }\\n']);\n\n      var _react = __webpack_require__(5);\n\n      var _react2 = _interopRequireDefault(_react);\n\n      var _propTypes = __webpack_require__(6);\n\n      var _propTypes2 = _interopRequireDefault(_propTypes);\n\n      var _typed = __webpack_require__(11);\n\n      var _typed2 = _interopRequireDefault(_typed);\n\n      var _styledComponents = __webpack_require__(12);\n\n      var _styledComponents2 = _interopRequireDefault(_styledComponents);\n\n      function _interopRequireDefault(obj) {\n        return obj && obj.__esModule ? obj : {\n          default: obj\n        };\n      }\n\n      function _objectWithoutProperties(obj, keys) {\n        var target = {};\n\n        for (var i in obj) {\n          if (keys.indexOf(i) >= 0) continue;\n          if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n          target[i] = obj[i];\n        }\n\n        return target;\n      }\n\n      function _classCallCheck(instance, Constructor) {\n        if (!(instance instanceof Constructor)) {\n          throw new TypeError(\"Cannot call a class as a function\");\n        }\n      }\n\n      function _possibleConstructorReturn(self, call) {\n        if (!self) {\n          throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n        }\n\n        return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n      }\n\n      function _inherits(subClass, superClass) {\n        if (typeof superClass !== \"function\" && superClass !== null) {\n          throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n        }\n\n        subClass.prototype = Object.create(superClass && superClass.prototype, {\n          constructor: {\n            value: subClass,\n            enumerable: false,\n            writable: true,\n            configurable: true\n          }\n        });\n        if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n      }\n\n      function _taggedTemplateLiteral(strings, raw) {\n        return Object.freeze(Object.defineProperties(strings, {\n          raw: {\n            value: Object.freeze(raw)\n          }\n        }));\n      }\n\n      var TypedWrapper = _styledComponents2.default.span(_templateObject);\n\n      var ReactTyped = function (_Component) {\n        _inherits(ReactTyped, _Component);\n\n        function ReactTyped() {\n          var _ref;\n\n          var _temp, _this, _ret;\n\n          _classCallCheck(this, ReactTyped);\n\n          for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n            args[_key] = arguments[_key];\n          }\n\n          return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = ReactTyped.__proto__ || Object.getPrototypeOf(ReactTyped)).call.apply(_ref, [this].concat(args))), _this), _this.rootElement = _react2.default.createRef(), _temp), _possibleConstructorReturn(_this, _ret);\n        }\n\n        _createClass(ReactTyped, [{\n          key: 'componentDidMount',\n          value: function componentDidMount() {\n            var _props = this.props,\n                style = _props.style,\n                typedRef = _props.typedRef,\n                stopped = _props.stopped,\n                className = _props.className,\n                typedOptions = _objectWithoutProperties(_props, ['style', 'typedRef', 'stopped', 'className']);\n\n            this.constructTyped(typedOptions);\n\n            if (stopped) {\n              this.typed.stop();\n            }\n          }\n        }, {\n          key: 'constructTyped',\n          value: function constructTyped() {\n            var _this2 = this;\n\n            var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n            var _props2 = this.props,\n                style = _props2.style,\n                typedRef = _props2.typedRef,\n                stopped = _props2.stopped,\n                className = _props2.className,\n                typedOptions = _objectWithoutProperties(_props2, ['style', 'typedRef', 'stopped', 'className']);\n\n            if (this.typed) {\n              this.typed.destroy();\n            }\n\n            this.typed = new _typed2.default(this.rootElement.current, Object.assign(typedOptions, options));\n\n            if (this.props.typedRef) {\n              this.props.typedRef(this.typed);\n            }\n\n            this.typed.reConstruct = function (opts) {\n              _this2.constructTyped(opts);\n            };\n          }\n        }, {\n          key: 'shouldComponentUpdate',\n          value: function shouldComponentUpdate(nextProps) {\n            var _this3 = this;\n\n            if (this.props !== nextProps) {\n              var style = nextProps.style,\n                  typedRef = nextProps.typedRef,\n                  stopped = nextProps.stopped,\n                  className = nextProps.className,\n                  typedOptions = _objectWithoutProperties(nextProps, ['style', 'typedRef', 'stopped', 'className']);\n\n              this.typed.options = Object.assign(this.typed.options, typedOptions);\n              var reConstructed = !Object.keys(nextProps).every(function (key) {\n                if (!_this3.props[key] && nextProps[key]) {\n                  _this3.constructTyped(nextProps);\n\n                  return false;\n                }\n\n                if (_this3.typed[key]) {\n                  _this3.typed[key] = nextProps[key];\n                }\n\n                return true;\n              });\n\n              if (!reConstructed && this.props.strings.length !== nextProps.strings.length) {\n                this.constructTyped(nextProps);\n              }\n\n              return true;\n            }\n\n            return false;\n          }\n        }, {\n          key: 'render',\n          value: function render() {\n            var _props3 = this.props,\n                style = _props3.style,\n                className = _props3.className,\n                children = _props3.children;\n\n            var child = _react2.default.createElement('span', {\n              ref: this.rootElement\n            });\n\n            if (children) {\n              child = _react2.default.cloneElement(children, {\n                ref: this.rootElement\n              });\n            }\n\n            return _react2.default.createElement(TypedWrapper, {\n              style: style,\n              className: className\n            }, child);\n          }\n        }]);\n\n        return ReactTyped;\n      }(_react.Component);\n\n      ReactTyped.propTypes = {\n        /** styles for the outer element */\n        style: _propTypes2.default.object,\n\n        /** class name for the outer element */\n        className: _propTypes2.default.string,\n\n        /** the element to wrapp */\n        children: _propTypes2.default.object,\n\n        /** typedRef(self: Typed) returns the Typed instance */\n        typedRef: _propTypes2.default.func,\n\n        /** initialize in stopped state */\n        stopped: _propTypes2.default.bool,\n\n        /** strings to be typed */\n        strings: _propTypes2.default.arrayOf(_propTypes2.default.string),\n\n        /**  type speed in milliseconds */\n        typeSpeed: _propTypes2.default.number,\n\n        /** time before typing starts in milliseconds */\n        startDelay: _propTypes2.default.number,\n\n        /** backspacing speed in milliseconds */\n        backSpeed: _propTypes2.default.number,\n\n        /**  only backspace what doesn't match the previous string */\n        smartBackspace: _propTypes2.default.bool,\n\n        /** shuffle the strings */\n        shuffle: _propTypes2.default.bool,\n\n        /** time before backspacing in milliseconds */\n        backDelay: _propTypes2.default.number,\n\n        /** Fade out instead of backspace */\n        fadeOut: _propTypes2.default.bool,\n\n        /** css class for fade animation */\n        fadeOutClass: _propTypes2.default.string,\n\n        /** Fade out delay in milliseconds */\n        fadeOutDelay: _propTypes2.default.number,\n\n        /** loop the strings */\n        loop: _propTypes2.default.bool,\n\n        /** amount of loops */\n        loopCount: _propTypes2.default.number,\n\n        /** show cursor */\n        showCursor: _propTypes2.default.bool,\n\n        /** character for cursor */\n        cursorChar: _propTypes2.default.string,\n\n        /** insert CSS for cursor and fadeOut into HTML */\n        autoInsertCss: _propTypes2.default.bool,\n\n        /** attribute for typing Ex: input placeholder, value, or just HTML text */\n        attr: _propTypes2.default.string,\n\n        /**  bind to focus and blur if el is text input */\n        bindInputFocusEvents: _propTypes2.default.bool,\n\n        /**  'html' or 'null' for plaintext */\n        contentType: _propTypes2.default.oneOf(['html', '']),\n\n        /** onComplete(self: Typed) All typing is complete */\n        onComplete: _propTypes2.default.func,\n\n        /** preStringTyped(arrayPos: number, self: Typed) Before each string is typed */\n        preStringTyped: _propTypes2.default.func,\n\n        /** onStringTyped(arrayPos: number, self: Typed) After each string is typed */\n        onStringTyped: _propTypes2.default.func,\n\n        /** onLastStringBackspaced(self: Typed) During looping, after last string is typed */\n        onLastStringBackspaced: _propTypes2.default.func,\n\n        /** onTypingPaused(arrayPos: number, self: Typed) Typing has been stopped */\n        onTypingPaused: _propTypes2.default.func,\n\n        /** onTypingResumed(arrayPos: number, self: Typed) Typing has been started after being stopped */\n        onTypingResumed: _propTypes2.default.func,\n\n        /** onReset(self: Typed) After reset */\n        onReset: _propTypes2.default.func,\n\n        /** onStop(arrayPos: number, self: Typed)    After stop */\n        onStop: _propTypes2.default.func,\n\n        /** onStart(arrayPos: number, self: Typed) After start */\n        onStart: _propTypes2.default.func,\n\n        /** onDestroy(self: Typed) After destroy */\n        onDestroy: _propTypes2.default.func\n      };\n      exports.default = ReactTyped;\n      /***/\n    },\n    /* 5 */\n\n    /***/\n    function (module, exports) {\n      module.exports = __WEBPACK_EXTERNAL_MODULE_5__;\n      /***/\n    },\n    /* 6 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      /**\n       * Copyright (c) 2013-present, Facebook, Inc.\n       *\n       * This source code is licensed under the MIT license found in the\n       * LICENSE file in the root directory of this source tree.\n       */\n      if (undefined !== 'production') {\n        var REACT_ELEMENT_TYPE = typeof Symbol === 'function' && Symbol.for && Symbol.for('react.element') || 0xeac7;\n\n        var isValidElement = function isValidElement(object) {\n          return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;\n        }; // By explicitly using `prop-types` you are opting into new development behavior.\n        // http://fb.me/prop-types-in-prod\n\n\n        var throwOnDirectAccess = true;\n        module.exports = __webpack_require__(7)(isValidElement, throwOnDirectAccess);\n      } else {\n        // By explicitly using `prop-types` you are opting into new production behavior.\n        // http://fb.me/prop-types-in-prod\n        module.exports = __webpack_require__(10)();\n      }\n      /***/\n\n    },\n    /* 7 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      \"use strict\";\n      /**\n       * Copyright (c) 2013-present, Facebook, Inc.\n       *\n       * This source code is licensed under the MIT license found in the\n       * LICENSE file in the root directory of this source tree.\n       */\n\n      var emptyFunction = __webpack_require__(0);\n\n      var invariant = __webpack_require__(1);\n\n      var warning = __webpack_require__(3);\n\n      var assign = __webpack_require__(8);\n\n      var ReactPropTypesSecret = __webpack_require__(2);\n\n      var checkPropTypes = __webpack_require__(9);\n\n      module.exports = function (isValidElement, throwOnDirectAccess) {\n        /* global Symbol */\n        var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;\n        var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.\n\n        /**\n         * Returns the iterator method function contained on the iterable object.\n         *\n         * Be sure to invoke the function with the iterable as context:\n         *\n         *     var iteratorFn = getIteratorFn(myIterable);\n         *     if (iteratorFn) {\n         *       var iterator = iteratorFn.call(myIterable);\n         *       ...\n         *     }\n         *\n         * @param {?object} maybeIterable\n         * @return {?function}\n         */\n\n        function getIteratorFn(maybeIterable) {\n          var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);\n\n          if (typeof iteratorFn === 'function') {\n            return iteratorFn;\n          }\n        }\n        /**\n         * Collection of methods that allow declaration and validation of props that are\n         * supplied to React components. Example usage:\n         *\n         *   var Props = require('ReactPropTypes');\n         *   var MyArticle = React.createClass({\n         *     propTypes: {\n         *       // An optional string prop named \"description\".\n         *       description: Props.string,\n         *\n         *       // A required enum prop named \"category\".\n         *       category: Props.oneOf(['News','Photos']).isRequired,\n         *\n         *       // A prop named \"dialog\" that requires an instance of Dialog.\n         *       dialog: Props.instanceOf(Dialog).isRequired\n         *     },\n         *     render: function() { ... }\n         *   });\n         *\n         * A more formal specification of how these methods are used:\n         *\n         *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)\n         *   decl := ReactPropTypes.{type}(.isRequired)?\n         *\n         * Each and every declaration produces a function with the same signature. This\n         * allows the creation of custom validation functions. For example:\n         *\n         *  var MyLink = React.createClass({\n         *    propTypes: {\n         *      // An optional string or URI prop named \"href\".\n         *      href: function(props, propName, componentName) {\n         *        var propValue = props[propName];\n         *        if (propValue != null && typeof propValue !== 'string' &&\n         *            !(propValue instanceof URI)) {\n         *          return new Error(\n         *            'Expected a string or an URI for ' + propName + ' in ' +\n         *            componentName\n         *          );\n         *        }\n         *      }\n         *    },\n         *    render: function() {...}\n         *  });\n         *\n         * @internal\n         */\n\n\n        var ANONYMOUS = '<<anonymous>>'; // Important!\n        // Keep this list in sync with production version in `./factoryWithThrowingShims.js`.\n\n        var ReactPropTypes = {\n          array: createPrimitiveTypeChecker('array'),\n          bool: createPrimitiveTypeChecker('boolean'),\n          func: createPrimitiveTypeChecker('function'),\n          number: createPrimitiveTypeChecker('number'),\n          object: createPrimitiveTypeChecker('object'),\n          string: createPrimitiveTypeChecker('string'),\n          symbol: createPrimitiveTypeChecker('symbol'),\n          any: createAnyTypeChecker(),\n          arrayOf: createArrayOfTypeChecker,\n          element: createElementTypeChecker(),\n          instanceOf: createInstanceTypeChecker,\n          node: createNodeChecker(),\n          objectOf: createObjectOfTypeChecker,\n          oneOf: createEnumTypeChecker,\n          oneOfType: createUnionTypeChecker,\n          shape: createShapeTypeChecker,\n          exact: createStrictShapeTypeChecker\n        };\n        /**\n         * inlined Object.is polyfill to avoid requiring consumers ship their own\n         * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is\n         */\n\n        /*eslint-disable no-self-compare*/\n\n        function is(x, y) {\n          // SameValue algorithm\n          if (x === y) {\n            // Steps 1-5, 7-10\n            // Steps 6.b-6.e: +0 != -0\n            return x !== 0 || 1 / x === 1 / y;\n          } else {\n            // Step 6.a: NaN == NaN\n            return x !== x && y !== y;\n          }\n        }\n        /*eslint-enable no-self-compare*/\n\n        /**\n         * We use an Error-like object for backward compatibility as people may call\n         * PropTypes directly and inspect their output. However, we don't use real\n         * Errors anymore. We don't inspect their stack anyway, and creating them\n         * is prohibitively expensive if they are created too often, such as what\n         * happens in oneOfType() for any type before the one that matched.\n         */\n\n\n        function PropTypeError(message) {\n          this.message = message;\n          this.stack = '';\n        } // Make `instanceof Error` still work for returned errors.\n\n\n        PropTypeError.prototype = Error.prototype;\n\n        function createChainableTypeChecker(validate) {\n          if (undefined !== 'production') {\n            var manualPropTypeCallCache = {};\n            var manualPropTypeWarningCount = 0;\n          }\n\n          function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {\n            componentName = componentName || ANONYMOUS;\n            propFullName = propFullName || propName;\n\n            if (secret !== ReactPropTypesSecret) {\n              if (throwOnDirectAccess) {\n                // New behavior only for users of `prop-types` package\n                invariant(false, 'Calling PropTypes validators directly is not supported by the `prop-types` package. ' + 'Use `PropTypes.checkPropTypes()` to call them. ' + 'Read more at http://fb.me/use-check-prop-types');\n              } else if (undefined !== 'production' && typeof console !== 'undefined') {\n                // Old behavior for people using React.PropTypes\n                var cacheKey = componentName + ':' + propName;\n\n                if (!manualPropTypeCallCache[cacheKey] && // Avoid spamming the console because they are often not actionable except for lib authors\n                manualPropTypeWarningCount < 3) {\n                  warning(false, 'You are manually calling a React.PropTypes validation ' + 'function for the `%s` prop on `%s`. This is deprecated ' + 'and will throw in the standalone `prop-types` package. ' + 'You may be seeing this warning due to a third-party PropTypes ' + 'library. See https://fb.me/react-warning-dont-call-proptypes ' + 'for details.', propFullName, componentName);\n                  manualPropTypeCallCache[cacheKey] = true;\n                  manualPropTypeWarningCount++;\n                }\n              }\n            }\n\n            if (props[propName] == null) {\n              if (isRequired) {\n                if (props[propName] === null) {\n                  return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required ' + ('in `' + componentName + '`, but its value is `null`.'));\n                }\n\n                return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required in ' + ('`' + componentName + '`, but its value is `undefined`.'));\n              }\n\n              return null;\n            } else {\n              return validate(props, propName, componentName, location, propFullName);\n            }\n          }\n\n          var chainedCheckType = checkType.bind(null, false);\n          chainedCheckType.isRequired = checkType.bind(null, true);\n          return chainedCheckType;\n        }\n\n        function createPrimitiveTypeChecker(expectedType) {\n          function validate(props, propName, componentName, location, propFullName, secret) {\n            var propValue = props[propName];\n            var propType = getPropType(propValue);\n\n            if (propType !== expectedType) {\n              // `propValue` being instance of, say, date/regexp, pass the 'object'\n              // check, but we can offer a more precise error message here rather than\n              // 'of type `object`'.\n              var preciseType = getPreciseType(propValue);\n              return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') + ('`' + expectedType + '`.'));\n            }\n\n            return null;\n          }\n\n          return createChainableTypeChecker(validate);\n        }\n\n        function createAnyTypeChecker() {\n          return createChainableTypeChecker(emptyFunction.thatReturnsNull);\n        }\n\n        function createArrayOfTypeChecker(typeChecker) {\n          function validate(props, propName, componentName, location, propFullName) {\n            if (typeof typeChecker !== 'function') {\n              return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside arrayOf.');\n            }\n\n            var propValue = props[propName];\n\n            if (!Array.isArray(propValue)) {\n              var propType = getPropType(propValue);\n              return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'));\n            }\n\n            for (var i = 0; i < propValue.length; i++) {\n              var error = typeChecker(propValue, i, componentName, location, propFullName + '[' + i + ']', ReactPropTypesSecret);\n\n              if (error instanceof Error) {\n                return error;\n              }\n            }\n\n            return null;\n          }\n\n          return createChainableTypeChecker(validate);\n        }\n\n        function createElementTypeChecker() {\n          function validate(props, propName, componentName, location, propFullName) {\n            var propValue = props[propName];\n\n            if (!isValidElement(propValue)) {\n              var propType = getPropType(propValue);\n              return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement.'));\n            }\n\n            return null;\n          }\n\n          return createChainableTypeChecker(validate);\n        }\n\n        function createInstanceTypeChecker(expectedClass) {\n          function validate(props, propName, componentName, location, propFullName) {\n            if (!(props[propName] instanceof expectedClass)) {\n              var expectedClassName = expectedClass.name || ANONYMOUS;\n              var actualClassName = getClassName(props[propName]);\n              return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + expectedClassName + '`.'));\n            }\n\n            return null;\n          }\n\n          return createChainableTypeChecker(validate);\n        }\n\n        function createEnumTypeChecker(expectedValues) {\n          if (!Array.isArray(expectedValues)) {\n            undefined !== 'production' ? warning(false, 'Invalid argument supplied to oneOf, expected an instance of array.') : void 0;\n            return emptyFunction.thatReturnsNull;\n          }\n\n          function validate(props, propName, componentName, location, propFullName) {\n            var propValue = props[propName];\n\n            for (var i = 0; i < expectedValues.length; i++) {\n              if (is(propValue, expectedValues[i])) {\n                return null;\n              }\n            }\n\n            var valuesString = JSON.stringify(expectedValues);\n            return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of value `' + propValue + '` ' + ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'));\n          }\n\n          return createChainableTypeChecker(validate);\n        }\n\n        function createObjectOfTypeChecker(typeChecker) {\n          function validate(props, propName, componentName, location, propFullName) {\n            if (typeof typeChecker !== 'function') {\n              return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside objectOf.');\n            }\n\n            var propValue = props[propName];\n            var propType = getPropType(propValue);\n\n            if (propType !== 'object') {\n              return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'));\n            }\n\n            for (var key in propValue) {\n              if (propValue.hasOwnProperty(key)) {\n                var error = typeChecker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);\n\n                if (error instanceof Error) {\n                  return error;\n                }\n              }\n            }\n\n            return null;\n          }\n\n          return createChainableTypeChecker(validate);\n        }\n\n        function createUnionTypeChecker(arrayOfTypeCheckers) {\n          if (!Array.isArray(arrayOfTypeCheckers)) {\n            undefined !== 'production' ? warning(false, 'Invalid argument supplied to oneOfType, expected an instance of array.') : void 0;\n            return emptyFunction.thatReturnsNull;\n          }\n\n          for (var i = 0; i < arrayOfTypeCheckers.length; i++) {\n            var checker = arrayOfTypeCheckers[i];\n\n            if (typeof checker !== 'function') {\n              warning(false, 'Invalid argument supplied to oneOfType. Expected an array of check functions, but ' + 'received %s at index %s.', getPostfixForTypeWarning(checker), i);\n              return emptyFunction.thatReturnsNull;\n            }\n          }\n\n          function validate(props, propName, componentName, location, propFullName) {\n            for (var i = 0; i < arrayOfTypeCheckers.length; i++) {\n              var checker = arrayOfTypeCheckers[i];\n\n              if (checker(props, propName, componentName, location, propFullName, ReactPropTypesSecret) == null) {\n                return null;\n              }\n            }\n\n            return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`.'));\n          }\n\n          return createChainableTypeChecker(validate);\n        }\n\n        function createNodeChecker() {\n          function validate(props, propName, componentName, location, propFullName) {\n            if (!isNode(props[propName])) {\n              return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a ReactNode.'));\n            }\n\n            return null;\n          }\n\n          return createChainableTypeChecker(validate);\n        }\n\n        function createShapeTypeChecker(shapeTypes) {\n          function validate(props, propName, componentName, location, propFullName) {\n            var propValue = props[propName];\n            var propType = getPropType(propValue);\n\n            if (propType !== 'object') {\n              return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));\n            }\n\n            for (var key in shapeTypes) {\n              var checker = shapeTypes[key];\n\n              if (!checker) {\n                continue;\n              }\n\n              var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);\n\n              if (error) {\n                return error;\n              }\n            }\n\n            return null;\n          }\n\n          return createChainableTypeChecker(validate);\n        }\n\n        function createStrictShapeTypeChecker(shapeTypes) {\n          function validate(props, propName, componentName, location, propFullName) {\n            var propValue = props[propName];\n            var propType = getPropType(propValue);\n\n            if (propType !== 'object') {\n              return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));\n            } // We need to check all keys in case some are required but missing from\n            // props.\n\n\n            var allKeys = assign({}, props[propName], shapeTypes);\n\n            for (var key in allKeys) {\n              var checker = shapeTypes[key];\n\n              if (!checker) {\n                return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` key `' + key + '` supplied to `' + componentName + '`.' + '\\nBad object: ' + JSON.stringify(props[propName], null, '  ') + '\\nValid keys: ' + JSON.stringify(Object.keys(shapeTypes), null, '  '));\n              }\n\n              var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);\n\n              if (error) {\n                return error;\n              }\n            }\n\n            return null;\n          }\n\n          return createChainableTypeChecker(validate);\n        }\n\n        function isNode(propValue) {\n          switch (typeof propValue) {\n            case 'number':\n            case 'string':\n            case 'undefined':\n              return true;\n\n            case 'boolean':\n              return !propValue;\n\n            case 'object':\n              if (Array.isArray(propValue)) {\n                return propValue.every(isNode);\n              }\n\n              if (propValue === null || isValidElement(propValue)) {\n                return true;\n              }\n\n              var iteratorFn = getIteratorFn(propValue);\n\n              if (iteratorFn) {\n                var iterator = iteratorFn.call(propValue);\n                var step;\n\n                if (iteratorFn !== propValue.entries) {\n                  while (!(step = iterator.next()).done) {\n                    if (!isNode(step.value)) {\n                      return false;\n                    }\n                  }\n                } else {\n                  // Iterator will provide entry [k,v] tuples rather than values.\n                  while (!(step = iterator.next()).done) {\n                    var entry = step.value;\n\n                    if (entry) {\n                      if (!isNode(entry[1])) {\n                        return false;\n                      }\n                    }\n                  }\n                }\n              } else {\n                return false;\n              }\n\n              return true;\n\n            default:\n              return false;\n          }\n        }\n\n        function isSymbol(propType, propValue) {\n          // Native Symbol.\n          if (propType === 'symbol') {\n            return true;\n          } // 19.4.3.5 Symbol.prototype[@@toStringTag] === 'Symbol'\n\n\n          if (propValue['@@toStringTag'] === 'Symbol') {\n            return true;\n          } // Fallback for non-spec compliant Symbols which are polyfilled.\n\n\n          if (typeof Symbol === 'function' && propValue instanceof Symbol) {\n            return true;\n          }\n\n          return false;\n        } // Equivalent of `typeof` but with special handling for array and regexp.\n\n\n        function getPropType(propValue) {\n          var propType = typeof propValue;\n\n          if (Array.isArray(propValue)) {\n            return 'array';\n          }\n\n          if (propValue instanceof RegExp) {\n            // Old webkits (at least until Android 4.0) return 'function' rather than\n            // 'object' for typeof a RegExp. We'll normalize this here so that /bla/\n            // passes PropTypes.object.\n            return 'object';\n          }\n\n          if (isSymbol(propType, propValue)) {\n            return 'symbol';\n          }\n\n          return propType;\n        } // This handles more types than `getPropType`. Only used for error messages.\n        // See `createPrimitiveTypeChecker`.\n\n\n        function getPreciseType(propValue) {\n          if (typeof propValue === 'undefined' || propValue === null) {\n            return '' + propValue;\n          }\n\n          var propType = getPropType(propValue);\n\n          if (propType === 'object') {\n            if (propValue instanceof Date) {\n              return 'date';\n            } else if (propValue instanceof RegExp) {\n              return 'regexp';\n            }\n          }\n\n          return propType;\n        } // Returns a string that is postfixed to a warning about an invalid type.\n        // For example, \"undefined\" or \"of type array\"\n\n\n        function getPostfixForTypeWarning(value) {\n          var type = getPreciseType(value);\n\n          switch (type) {\n            case 'array':\n            case 'object':\n              return 'an ' + type;\n\n            case 'boolean':\n            case 'date':\n            case 'regexp':\n              return 'a ' + type;\n\n            default:\n              return type;\n          }\n        } // Returns class name of the object, if any.\n\n\n        function getClassName(propValue) {\n          if (!propValue.constructor || !propValue.constructor.name) {\n            return ANONYMOUS;\n          }\n\n          return propValue.constructor.name;\n        }\n\n        ReactPropTypes.checkPropTypes = checkPropTypes;\n        ReactPropTypes.PropTypes = ReactPropTypes;\n        return ReactPropTypes;\n      };\n      /***/\n\n    },\n    /* 8 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      \"use strict\";\n      /*\n      object-assign\n      (c) Sindre Sorhus\n      @license MIT\n      */\n\n      /* eslint-disable no-unused-vars */\n\n      var getOwnPropertySymbols = Object.getOwnPropertySymbols;\n      var hasOwnProperty = Object.prototype.hasOwnProperty;\n      var propIsEnumerable = Object.prototype.propertyIsEnumerable;\n\n      function toObject(val) {\n        if (val === null || val === undefined) {\n          throw new TypeError('Object.assign cannot be called with null or undefined');\n        }\n\n        return Object(val);\n      }\n\n      function shouldUseNative() {\n        try {\n          if (!Object.assign) {\n            return false;\n          } // Detect buggy property enumeration order in older V8 versions.\n          // https://bugs.chromium.org/p/v8/issues/detail?id=4118\n\n\n          var test1 = new String('abc'); // eslint-disable-line no-new-wrappers\n\n          test1[5] = 'de';\n\n          if (Object.getOwnPropertyNames(test1)[0] === '5') {\n            return false;\n          } // https://bugs.chromium.org/p/v8/issues/detail?id=3056\n\n\n          var test2 = {};\n\n          for (var i = 0; i < 10; i++) {\n            test2['_' + String.fromCharCode(i)] = i;\n          }\n\n          var order2 = Object.getOwnPropertyNames(test2).map(function (n) {\n            return test2[n];\n          });\n\n          if (order2.join('') !== '0123456789') {\n            return false;\n          } // https://bugs.chromium.org/p/v8/issues/detail?id=3056\n\n\n          var test3 = {};\n          'abcdefghijklmnopqrst'.split('').forEach(function (letter) {\n            test3[letter] = letter;\n          });\n\n          if (Object.keys(Object.assign({}, test3)).join('') !== 'abcdefghijklmnopqrst') {\n            return false;\n          }\n\n          return true;\n        } catch (err) {\n          // We don't expect any of the above to throw, but better to be safe.\n          return false;\n        }\n      }\n\n      module.exports = shouldUseNative() ? Object.assign : function (target, source) {\n        var from;\n        var to = toObject(target);\n        var symbols;\n\n        for (var s = 1; s < arguments.length; s++) {\n          from = Object(arguments[s]);\n\n          for (var key in from) {\n            if (hasOwnProperty.call(from, key)) {\n              to[key] = from[key];\n            }\n          }\n\n          if (getOwnPropertySymbols) {\n            symbols = getOwnPropertySymbols(from);\n\n            for (var i = 0; i < symbols.length; i++) {\n              if (propIsEnumerable.call(from, symbols[i])) {\n                to[symbols[i]] = from[symbols[i]];\n              }\n            }\n          }\n        }\n\n        return to;\n      };\n      /***/\n    },\n    /* 9 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      \"use strict\";\n      /**\n       * Copyright (c) 2013-present, Facebook, Inc.\n       *\n       * This source code is licensed under the MIT license found in the\n       * LICENSE file in the root directory of this source tree.\n       */\n\n      if (undefined !== 'production') {\n        var invariant = __webpack_require__(1);\n\n        var warning = __webpack_require__(3);\n\n        var ReactPropTypesSecret = __webpack_require__(2);\n\n        var loggedTypeFailures = {};\n      }\n      /**\n       * Assert that the values match with the type specs.\n       * Error messages are memorized and will only be shown once.\n       *\n       * @param {object} typeSpecs Map of name to a ReactPropType\n       * @param {object} values Runtime values that need to be type-checked\n       * @param {string} location e.g. \"prop\", \"context\", \"child context\"\n       * @param {string} componentName Name of the component for error messages.\n       * @param {?Function} getStack Returns the component stack.\n       * @private\n       */\n\n\n      function checkPropTypes(typeSpecs, values, location, componentName, getStack) {\n        if (undefined !== 'production') {\n          for (var typeSpecName in typeSpecs) {\n            if (typeSpecs.hasOwnProperty(typeSpecName)) {\n              var error; // Prop type validation may throw. In case they do, we don't want to\n              // fail the render phase where it didn't fail before. So we log it.\n              // After these have been cleaned up, we'll let them throw.\n\n              try {\n                // This is intentionally an invariant that gets caught. It's the same\n                // behavior as without this statement except with a better message.\n                invariant(typeof typeSpecs[typeSpecName] === 'function', '%s: %s type `%s` is invalid; it must be a function, usually from ' + 'the `prop-types` package, but received `%s`.', componentName || 'React class', location, typeSpecName, typeof typeSpecs[typeSpecName]);\n                error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);\n              } catch (ex) {\n                error = ex;\n              }\n\n              warning(!error || error instanceof Error, '%s: type specification of %s `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', location, typeSpecName, typeof error);\n\n              if (error instanceof Error && !(error.message in loggedTypeFailures)) {\n                // Only monitor this failure once because there tends to be a lot of the\n                // same error.\n                loggedTypeFailures[error.message] = true;\n                var stack = getStack ? getStack() : '';\n                warning(false, 'Failed %s type: %s%s', location, error.message, stack != null ? stack : '');\n              }\n            }\n          }\n        }\n      }\n\n      module.exports = checkPropTypes;\n      /***/\n    },\n    /* 10 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      \"use strict\";\n      /**\n       * Copyright (c) 2013-present, Facebook, Inc.\n       *\n       * This source code is licensed under the MIT license found in the\n       * LICENSE file in the root directory of this source tree.\n       */\n\n      var emptyFunction = __webpack_require__(0);\n\n      var invariant = __webpack_require__(1);\n\n      var ReactPropTypesSecret = __webpack_require__(2);\n\n      module.exports = function () {\n        function shim(props, propName, componentName, location, propFullName, secret) {\n          if (secret === ReactPropTypesSecret) {\n            // It is still safe when called from React.\n            return;\n          }\n\n          invariant(false, 'Calling PropTypes validators directly is not supported by the `prop-types` package. ' + 'Use PropTypes.checkPropTypes() to call them. ' + 'Read more at http://fb.me/use-check-prop-types');\n        }\n\n        ;\n        shim.isRequired = shim;\n\n        function getShim() {\n          return shim;\n        }\n\n        ; // Important!\n        // Keep this list in sync with production version in `./factoryWithTypeCheckers.js`.\n\n        var ReactPropTypes = {\n          array: shim,\n          bool: shim,\n          func: shim,\n          number: shim,\n          object: shim,\n          string: shim,\n          symbol: shim,\n          any: shim,\n          arrayOf: getShim,\n          element: shim,\n          instanceOf: getShim,\n          node: shim,\n          objectOf: getShim,\n          oneOf: getShim,\n          oneOfType: getShim,\n          shape: getShim,\n          exact: getShim\n        };\n        ReactPropTypes.checkPropTypes = emptyFunction;\n        ReactPropTypes.PropTypes = ReactPropTypes;\n        return ReactPropTypes;\n      };\n      /***/\n\n    },\n    /* 11 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      /*!\n       * \n       *   typed.js - A JavaScript Typing Animation Library\n       *   Author: Matt Boldt <me@mattboldt.com>\n       *   Version: v2.0.6\n       *   Url: https://github.com/mattboldt/typed.js\n       *   License(s): MIT\n       * \n       */\n      (function webpackUniversalModuleDefinition(root, factory) {\n        if (true) module.exports = factory();else if (typeof define === 'function' && define.amd) define([], factory);else if (typeof exports === 'object') exports[\"Typed\"] = factory();else root[\"Typed\"] = factory();\n      })(this, function () {\n        return (\n          /******/\n          function (modules) {\n            // webpackBootstrap\n\n            /******/\n            // The module cache\n\n            /******/\n            var installedModules = {};\n            /******/\n\n            /******/\n            // The require function\n\n            /******/\n\n            function __webpack_require__(moduleId) {\n              /******/\n\n              /******/\n              // Check if module is in cache\n\n              /******/\n              if (installedModules[moduleId])\n                /******/\n                return installedModules[moduleId].exports;\n              /******/\n\n              /******/\n              // Create a new module (and put it into the cache)\n\n              /******/\n\n              var module = installedModules[moduleId] = {\n                /******/\n                exports: {},\n\n                /******/\n                id: moduleId,\n\n                /******/\n                loaded: false\n                /******/\n\n              };\n              /******/\n\n              /******/\n              // Execute the module function\n\n              /******/\n\n              modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n              /******/\n\n              /******/\n              // Flag the module as loaded\n\n              /******/\n\n              module.loaded = true;\n              /******/\n\n              /******/\n              // Return the exports of the module\n\n              /******/\n\n              return module.exports;\n              /******/\n            }\n            /******/\n\n            /******/\n\n            /******/\n            // expose the modules object (__webpack_modules__)\n\n            /******/\n\n\n            __webpack_require__.m = modules;\n            /******/\n\n            /******/\n            // expose the module cache\n\n            /******/\n\n            __webpack_require__.c = installedModules;\n            /******/\n\n            /******/\n            // __webpack_public_path__\n\n            /******/\n\n            __webpack_require__.p = \"\";\n            /******/\n\n            /******/\n            // Load entry module and return exports\n\n            /******/\n\n            return __webpack_require__(0);\n            /******/\n          }(\n          /************************************************************************/\n\n          /******/\n          [\n          /* 0 */\n\n          /***/\n          function (module, exports, __webpack_require__) {\n            'use strict';\n\n            Object.defineProperty(exports, '__esModule', {\n              value: true\n            });\n\n            var _createClass = function () {\n              function defineProperties(target, props) {\n                for (var i = 0; i < props.length; i++) {\n                  var descriptor = props[i];\n                  descriptor.enumerable = descriptor.enumerable || false;\n                  descriptor.configurable = true;\n                  if ('value' in descriptor) descriptor.writable = true;\n                  Object.defineProperty(target, descriptor.key, descriptor);\n                }\n              }\n\n              return function (Constructor, protoProps, staticProps) {\n                if (protoProps) defineProperties(Constructor.prototype, protoProps);\n                if (staticProps) defineProperties(Constructor, staticProps);\n                return Constructor;\n              };\n            }();\n\n            function _classCallCheck(instance, Constructor) {\n              if (!(instance instanceof Constructor)) {\n                throw new TypeError('Cannot call a class as a function');\n              }\n            }\n\n            var _initializerJs = __webpack_require__(1);\n\n            var _htmlParserJs = __webpack_require__(3);\n            /**\n             * Welcome to Typed.js!\n             * @param {string} elementId HTML element ID _OR_ HTML element\n             * @param {object} options options object\n             * @returns {object} a new Typed object\n             */\n\n\n            var Typed = function () {\n              function Typed(elementId, options) {\n                _classCallCheck(this, Typed); // Initialize it up\n\n\n                _initializerJs.initializer.load(this, options, elementId); // All systems go!\n\n\n                this.begin();\n              }\n              /**\n               * Toggle start() and stop() of the Typed instance\n               * @public\n               */\n\n\n              _createClass(Typed, [{\n                key: 'toggle',\n                value: function toggle() {\n                  this.pause.status ? this.start() : this.stop();\n                }\n                /**\n                 * Stop typing / backspacing and enable cursor blinking\n                 * @public\n                 */\n\n              }, {\n                key: 'stop',\n                value: function stop() {\n                  if (this.typingComplete) return;\n                  if (this.pause.status) return;\n                  this.toggleBlinking(true);\n                  this.pause.status = true;\n                  this.options.onStop(this.arrayPos, this);\n                }\n                /**\n                 * Start typing / backspacing after being stopped\n                 * @public\n                 */\n\n              }, {\n                key: 'start',\n                value: function start() {\n                  if (this.typingComplete) return;\n                  if (!this.pause.status) return;\n                  this.pause.status = false;\n\n                  if (this.pause.typewrite) {\n                    this.typewrite(this.pause.curString, this.pause.curStrPos);\n                  } else {\n                    this.backspace(this.pause.curString, this.pause.curStrPos);\n                  }\n\n                  this.options.onStart(this.arrayPos, this);\n                }\n                /**\n                 * Destroy this instance of Typed\n                 * @public\n                 */\n\n              }, {\n                key: 'destroy',\n                value: function destroy() {\n                  this.reset(false);\n                  this.options.onDestroy(this);\n                }\n                /**\n                 * Reset Typed and optionally restarts\n                 * @param {boolean} restart\n                 * @public\n                 */\n\n              }, {\n                key: 'reset',\n                value: function reset() {\n                  var restart = arguments.length <= 0 || arguments[0] === undefined ? true : arguments[0];\n                  clearInterval(this.timeout);\n                  this.replaceText('');\n\n                  if (this.cursor && this.cursor.parentNode) {\n                    this.cursor.parentNode.removeChild(this.cursor);\n                    this.cursor = null;\n                  }\n\n                  this.strPos = 0;\n                  this.arrayPos = 0;\n                  this.curLoop = 0;\n\n                  if (restart) {\n                    this.insertCursor();\n                    this.options.onReset(this);\n                    this.begin();\n                  }\n                }\n                /**\n                 * Begins the typing animation\n                 * @private\n                 */\n\n              }, {\n                key: 'begin',\n                value: function begin() {\n                  var _this = this;\n\n                  this.typingComplete = false;\n                  this.shuffleStringsIfNeeded(this);\n                  this.insertCursor();\n                  if (this.bindInputFocusEvents) this.bindFocusEvents();\n                  this.timeout = setTimeout(function () {\n                    // Check if there is some text in the element, if yes start by backspacing the default message\n                    if (!_this.currentElContent || _this.currentElContent.length === 0) {\n                      _this.typewrite(_this.strings[_this.sequence[_this.arrayPos]], _this.strPos);\n                    } else {\n                      // Start typing\n                      _this.backspace(_this.currentElContent, _this.currentElContent.length);\n                    }\n                  }, this.startDelay);\n                }\n                /**\n                 * Called for each character typed\n                 * @param {string} curString the current string in the strings array\n                 * @param {number} curStrPos the current position in the curString\n                 * @private\n                 */\n\n              }, {\n                key: 'typewrite',\n                value: function typewrite(curString, curStrPos) {\n                  var _this2 = this;\n\n                  if (this.fadeOut && this.el.classList.contains(this.fadeOutClass)) {\n                    this.el.classList.remove(this.fadeOutClass);\n                    if (this.cursor) this.cursor.classList.remove(this.fadeOutClass);\n                  }\n\n                  var humanize = this.humanizer(this.typeSpeed);\n                  var numChars = 1;\n\n                  if (this.pause.status === true) {\n                    this.setPauseStatus(curString, curStrPos, true);\n                    return;\n                  } // contain typing function in a timeout humanize'd delay\n\n\n                  this.timeout = setTimeout(function () {\n                    // skip over any HTML chars\n                    curStrPos = _htmlParserJs.htmlParser.typeHtmlChars(curString, curStrPos, _this2);\n                    var pauseTime = 0;\n                    var substr = curString.substr(curStrPos); // check for an escape character before a pause value\n                    // format: \\^\\d+ .. eg: ^1000 .. should be able to print the ^ too using ^^\n                    // single ^ are removed from string\n\n                    if (substr.charAt(0) === '^') {\n                      if (/^\\^\\d+/.test(substr)) {\n                        var skip = 1; // skip at least 1\n\n                        substr = /\\d+/.exec(substr)[0];\n                        skip += substr.length;\n                        pauseTime = parseInt(substr);\n                        _this2.temporaryPause = true;\n\n                        _this2.options.onTypingPaused(_this2.arrayPos, _this2); // strip out the escape character and pause value so they're not printed\n\n\n                        curString = curString.substring(0, curStrPos) + curString.substring(curStrPos + skip);\n\n                        _this2.toggleBlinking(true);\n                      }\n                    } // check for skip characters formatted as\n                    // \"this is a `string to print NOW` ...\"\n\n\n                    if (substr.charAt(0) === '`') {\n                      while (curString.substr(curStrPos + numChars).charAt(0) !== '`') {\n                        numChars++;\n                        if (curStrPos + numChars > curString.length) break;\n                      } // strip out the escape characters and append all the string in between\n\n\n                      var stringBeforeSkip = curString.substring(0, curStrPos);\n                      var stringSkipped = curString.substring(stringBeforeSkip.length + 1, curStrPos + numChars);\n                      var stringAfterSkip = curString.substring(curStrPos + numChars + 1);\n                      curString = stringBeforeSkip + stringSkipped + stringAfterSkip;\n                      numChars--;\n                    } // timeout for any pause after a character\n\n\n                    _this2.timeout = setTimeout(function () {\n                      // Accounts for blinking while paused\n                      _this2.toggleBlinking(false); // We're done with this sentence!\n\n\n                      if (curStrPos === curString.length) {\n                        _this2.doneTyping(curString, curStrPos);\n                      } else {\n                        _this2.keepTyping(curString, curStrPos, numChars);\n                      } // end of character pause\n\n\n                      if (_this2.temporaryPause) {\n                        _this2.temporaryPause = false;\n\n                        _this2.options.onTypingResumed(_this2.arrayPos, _this2);\n                      }\n                    }, pauseTime); // humanized value for typing\n                  }, humanize);\n                }\n                /**\n                 * Continue to the next string & begin typing\n                 * @param {string} curString the current string in the strings array\n                 * @param {number} curStrPos the current position in the curString\n                 * @private\n                 */\n\n              }, {\n                key: 'keepTyping',\n                value: function keepTyping(curString, curStrPos, numChars) {\n                  // call before functions if applicable\n                  if (curStrPos === 0) {\n                    this.toggleBlinking(false);\n                    this.options.preStringTyped(this.arrayPos, this);\n                  } // start typing each new char into existing string\n                  // curString: arg, this.el.html: original text inside element\n\n\n                  curStrPos += numChars;\n                  var nextString = curString.substr(0, curStrPos);\n                  this.replaceText(nextString); // loop the function\n\n                  this.typewrite(curString, curStrPos);\n                }\n                /**\n                 * We're done typing all strings\n                 * @param {string} curString the current string in the strings array\n                 * @param {number} curStrPos the current position in the curString\n                 * @private\n                 */\n\n              }, {\n                key: 'doneTyping',\n                value: function doneTyping(curString, curStrPos) {\n                  var _this3 = this; // fires callback function\n\n\n                  this.options.onStringTyped(this.arrayPos, this);\n                  this.toggleBlinking(true); // is this the final string\n\n                  if (this.arrayPos === this.strings.length - 1) {\n                    // callback that occurs on the last typed string\n                    this.complete(); // quit if we wont loop back\n\n                    if (this.loop === false || this.curLoop === this.loopCount) {\n                      return;\n                    }\n                  }\n\n                  this.timeout = setTimeout(function () {\n                    _this3.backspace(curString, curStrPos);\n                  }, this.backDelay);\n                }\n                /**\n                 * Backspaces 1 character at a time\n                 * @param {string} curString the current string in the strings array\n                 * @param {number} curStrPos the current position in the curString\n                 * @private\n                 */\n\n              }, {\n                key: 'backspace',\n                value: function backspace(curString, curStrPos) {\n                  var _this4 = this;\n\n                  if (this.pause.status === true) {\n                    this.setPauseStatus(curString, curStrPos, true);\n                    return;\n                  }\n\n                  if (this.fadeOut) return this.initFadeOut();\n                  this.toggleBlinking(false);\n                  var humanize = this.humanizer(this.backSpeed);\n                  this.timeout = setTimeout(function () {\n                    curStrPos = _htmlParserJs.htmlParser.backSpaceHtmlChars(curString, curStrPos, _this4); // replace text with base text + typed characters\n\n                    var curStringAtPosition = curString.substr(0, curStrPos);\n\n                    _this4.replaceText(curStringAtPosition); // if smartBack is enabled\n\n\n                    if (_this4.smartBackspace) {\n                      // the remaining part of the current string is equal of the same part of the new string\n                      var nextString = _this4.strings[_this4.arrayPos + 1];\n\n                      if (nextString && curStringAtPosition === nextString.substr(0, curStrPos)) {\n                        _this4.stopNum = curStrPos;\n                      } else {\n                        _this4.stopNum = 0;\n                      }\n                    } // if the number (id of character in current string) is\n                    // less than the stop number, keep going\n\n\n                    if (curStrPos > _this4.stopNum) {\n                      // subtract characters one by one\n                      curStrPos--; // loop the function\n\n                      _this4.backspace(curString, curStrPos);\n                    } else if (curStrPos <= _this4.stopNum) {\n                      // if the stop number has been reached, increase\n                      // array position to next string\n                      _this4.arrayPos++; // When looping, begin at the beginning after backspace complete\n\n                      if (_this4.arrayPos === _this4.strings.length) {\n                        _this4.arrayPos = 0;\n\n                        _this4.options.onLastStringBackspaced();\n\n                        _this4.shuffleStringsIfNeeded();\n\n                        _this4.begin();\n                      } else {\n                        _this4.typewrite(_this4.strings[_this4.sequence[_this4.arrayPos]], curStrPos);\n                      }\n                    } // humanized value for typing\n\n                  }, humanize);\n                }\n                /**\n                 * Full animation is complete\n                 * @private\n                 */\n\n              }, {\n                key: 'complete',\n                value: function complete() {\n                  this.options.onComplete(this);\n\n                  if (this.loop) {\n                    this.curLoop++;\n                  } else {\n                    this.typingComplete = true;\n                  }\n                }\n                /**\n                 * Has the typing been stopped\n                 * @param {string} curString the current string in the strings array\n                 * @param {number} curStrPos the current position in the curString\n                 * @param {boolean} isTyping\n                 * @private\n                 */\n\n              }, {\n                key: 'setPauseStatus',\n                value: function setPauseStatus(curString, curStrPos, isTyping) {\n                  this.pause.typewrite = isTyping;\n                  this.pause.curString = curString;\n                  this.pause.curStrPos = curStrPos;\n                }\n                /**\n                 * Toggle the blinking cursor\n                 * @param {boolean} isBlinking\n                 * @private\n                 */\n\n              }, {\n                key: 'toggleBlinking',\n                value: function toggleBlinking(isBlinking) {\n                  if (!this.cursor) return; // if in paused state, don't toggle blinking a 2nd time\n\n                  if (this.pause.status) return;\n                  if (this.cursorBlinking === isBlinking) return;\n                  this.cursorBlinking = isBlinking;\n                  var status = isBlinking ? 'infinite' : 0;\n                  this.cursor.style.animationIterationCount = status;\n                }\n                /**\n                 * Speed in MS to type\n                 * @param {number} speed\n                 * @private\n                 */\n\n              }, {\n                key: 'humanizer',\n                value: function humanizer(speed) {\n                  return Math.round(Math.random() * speed / 2) + speed;\n                }\n                /**\n                 * Shuffle the sequence of the strings array\n                 * @private\n                 */\n\n              }, {\n                key: 'shuffleStringsIfNeeded',\n                value: function shuffleStringsIfNeeded() {\n                  if (!this.shuffle) return;\n                  this.sequence = this.sequence.sort(function () {\n                    return Math.random() - 0.5;\n                  });\n                }\n                /**\n                 * Adds a CSS class to fade out current string\n                 * @private\n                 */\n\n              }, {\n                key: 'initFadeOut',\n                value: function initFadeOut() {\n                  var _this5 = this;\n\n                  this.el.className += ' ' + this.fadeOutClass;\n                  if (this.cursor) this.cursor.className += ' ' + this.fadeOutClass;\n                  return setTimeout(function () {\n                    _this5.arrayPos++;\n\n                    _this5.replaceText(''); // Resets current string if end of loop reached\n\n\n                    if (_this5.strings.length > _this5.arrayPos) {\n                      _this5.typewrite(_this5.strings[_this5.sequence[_this5.arrayPos]], 0);\n                    } else {\n                      _this5.typewrite(_this5.strings[0], 0);\n\n                      _this5.arrayPos = 0;\n                    }\n                  }, this.fadeOutDelay);\n                }\n                /**\n                 * Replaces current text in the HTML element\n                 * depending on element type\n                 * @param {string} str\n                 * @private\n                 */\n\n              }, {\n                key: 'replaceText',\n                value: function replaceText(str) {\n                  if (this.attr) {\n                    this.el.setAttribute(this.attr, str);\n                  } else {\n                    if (this.isInput) {\n                      this.el.value = str;\n                    } else if (this.contentType === 'html') {\n                      this.el.innerHTML = str;\n                    } else {\n                      this.el.textContent = str;\n                    }\n                  }\n                }\n                /**\n                 * If using input elements, bind focus in order to\n                 * start and stop the animation\n                 * @private\n                 */\n\n              }, {\n                key: 'bindFocusEvents',\n                value: function bindFocusEvents() {\n                  var _this6 = this;\n\n                  if (!this.isInput) return;\n                  this.el.addEventListener('focus', function (e) {\n                    _this6.stop();\n                  });\n                  this.el.addEventListener('blur', function (e) {\n                    if (_this6.el.value && _this6.el.value.length !== 0) {\n                      return;\n                    }\n\n                    _this6.start();\n                  });\n                }\n                /**\n                 * On init, insert the cursor element\n                 * @private\n                 */\n\n              }, {\n                key: 'insertCursor',\n                value: function insertCursor() {\n                  if (!this.showCursor) return;\n                  if (this.cursor) return;\n                  this.cursor = document.createElement('span');\n                  this.cursor.className = 'typed-cursor';\n                  this.cursor.innerHTML = this.cursorChar;\n                  this.el.parentNode && this.el.parentNode.insertBefore(this.cursor, this.el.nextSibling);\n                }\n              }]);\n\n              return Typed;\n            }();\n\n            exports['default'] = Typed;\n            module.exports = exports['default'];\n            /***/\n          },\n          /* 1 */\n\n          /***/\n          function (module, exports, __webpack_require__) {\n            'use strict';\n\n            Object.defineProperty(exports, '__esModule', {\n              value: true\n            });\n\n            var _extends = Object.assign || function (target) {\n              for (var i = 1; i < arguments.length; i++) {\n                var source = arguments[i];\n\n                for (var key in source) {\n                  if (Object.prototype.hasOwnProperty.call(source, key)) {\n                    target[key] = source[key];\n                  }\n                }\n              }\n\n              return target;\n            };\n\n            var _createClass = function () {\n              function defineProperties(target, props) {\n                for (var i = 0; i < props.length; i++) {\n                  var descriptor = props[i];\n                  descriptor.enumerable = descriptor.enumerable || false;\n                  descriptor.configurable = true;\n                  if ('value' in descriptor) descriptor.writable = true;\n                  Object.defineProperty(target, descriptor.key, descriptor);\n                }\n              }\n\n              return function (Constructor, protoProps, staticProps) {\n                if (protoProps) defineProperties(Constructor.prototype, protoProps);\n                if (staticProps) defineProperties(Constructor, staticProps);\n                return Constructor;\n              };\n            }();\n\n            function _interopRequireDefault(obj) {\n              return obj && obj.__esModule ? obj : {\n                'default': obj\n              };\n            }\n\n            function _classCallCheck(instance, Constructor) {\n              if (!(instance instanceof Constructor)) {\n                throw new TypeError('Cannot call a class as a function');\n              }\n            }\n\n            var _defaultsJs = __webpack_require__(2);\n\n            var _defaultsJs2 = _interopRequireDefault(_defaultsJs);\n            /**\n             * Initialize the Typed object\n             */\n\n\n            var Initializer = function () {\n              function Initializer() {\n                _classCallCheck(this, Initializer);\n              }\n\n              _createClass(Initializer, [{\n                key: 'load',\n\n                /**\n                 * Load up defaults & options on the Typed instance\n                 * @param {Typed} self instance of Typed\n                 * @param {object} options options object\n                 * @param {string} elementId HTML element ID _OR_ instance of HTML element\n                 * @private\n                 */\n                value: function load(self, options, elementId) {\n                  // chosen element to manipulate text\n                  if (typeof elementId === 'string') {\n                    self.el = document.querySelector(elementId);\n                  } else {\n                    self.el = elementId;\n                  }\n\n                  self.options = _extends({}, _defaultsJs2['default'], options); // attribute to type into\n\n                  self.isInput = self.el.tagName.toLowerCase() === 'input';\n                  self.attr = self.options.attr;\n                  self.bindInputFocusEvents = self.options.bindInputFocusEvents; // show cursor\n\n                  self.showCursor = self.isInput ? false : self.options.showCursor; // custom cursor\n\n                  self.cursorChar = self.options.cursorChar; // Is the cursor blinking\n\n                  self.cursorBlinking = true; // text content of element\n\n                  self.elContent = self.attr ? self.el.getAttribute(self.attr) : self.el.textContent; // html or plain text\n\n                  self.contentType = self.options.contentType; // typing speed\n\n                  self.typeSpeed = self.options.typeSpeed; // add a delay before typing starts\n\n                  self.startDelay = self.options.startDelay; // backspacing speed\n\n                  self.backSpeed = self.options.backSpeed; // only backspace what doesn't match the previous string\n\n                  self.smartBackspace = self.options.smartBackspace; // amount of time to wait before backspacing\n\n                  self.backDelay = self.options.backDelay; // Fade out instead of backspace\n\n                  self.fadeOut = self.options.fadeOut;\n                  self.fadeOutClass = self.options.fadeOutClass;\n                  self.fadeOutDelay = self.options.fadeOutDelay; // variable to check whether typing is currently paused\n\n                  self.isPaused = false; // input strings of text\n\n                  self.strings = self.options.strings.map(function (s) {\n                    return s.trim();\n                  }); // div containing strings\n\n                  if (typeof self.options.stringsElement === 'string') {\n                    self.stringsElement = document.querySelector(self.options.stringsElement);\n                  } else {\n                    self.stringsElement = self.options.stringsElement;\n                  }\n\n                  if (self.stringsElement) {\n                    self.strings = [];\n                    self.stringsElement.style.display = 'none';\n                    var strings = Array.prototype.slice.apply(self.stringsElement.children);\n                    var stringsLength = strings.length;\n\n                    if (stringsLength) {\n                      for (var i = 0; i < stringsLength; i += 1) {\n                        var stringEl = strings[i];\n                        self.strings.push(stringEl.innerHTML.trim());\n                      }\n                    }\n                  } // character number position of current string\n\n\n                  self.strPos = 0; // current array position\n\n                  self.arrayPos = 0; // index of string to stop backspacing on\n\n                  self.stopNum = 0; // Looping logic\n\n                  self.loop = self.options.loop;\n                  self.loopCount = self.options.loopCount;\n                  self.curLoop = 0; // shuffle the strings\n\n                  self.shuffle = self.options.shuffle; // the order of strings\n\n                  self.sequence = [];\n                  self.pause = {\n                    status: false,\n                    typewrite: true,\n                    curString: '',\n                    curStrPos: 0\n                  }; // When the typing is complete (when not looped)\n\n                  self.typingComplete = false; // Set the order in which the strings are typed\n\n                  for (var i in self.strings) {\n                    self.sequence[i] = i;\n                  } // If there is some text in the element\n\n\n                  self.currentElContent = this.getCurrentElContent(self);\n                  self.autoInsertCss = self.options.autoInsertCss;\n                  this.appendAnimationCss(self);\n                }\n              }, {\n                key: 'getCurrentElContent',\n                value: function getCurrentElContent(self) {\n                  var elContent = '';\n\n                  if (self.attr) {\n                    elContent = self.el.getAttribute(self.attr);\n                  } else if (self.isInput) {\n                    elContent = self.el.value;\n                  } else if (self.contentType === 'html') {\n                    elContent = self.el.innerHTML;\n                  } else {\n                    elContent = self.el.textContent;\n                  }\n\n                  return elContent;\n                }\n              }, {\n                key: 'appendAnimationCss',\n                value: function appendAnimationCss(self) {\n                  if (!self.autoInsertCss) {\n                    return;\n                  }\n\n                  if (!self.showCursor || !self.fadeOut) {\n                    return;\n                  }\n\n                  var css = document.createElement('style');\n                  css.type = 'text/css';\n                  var innerCss = '';\n\n                  if (self.showCursor) {\n                    innerCss += '\\n        .typed-cursor{\\n          opacity: 1;\\n          animation: typedjsBlink 0.7s infinite;\\n          -webkit-animation: typedjsBlink 0.7s infinite;\\n                  animation: typedjsBlink 0.7s infinite;\\n        }\\n        @keyframes typedjsBlink{\\n          50% { opacity: 0.0; }\\n        }\\n        @-webkit-keyframes typedjsBlink{\\n          0% { opacity: 1; }\\n          50% { opacity: 0.0; }\\n          100% { opacity: 1; }\\n        }\\n      ';\n                  }\n\n                  if (self.fadeOut) {\n                    innerCss += '\\n        .typed-fade-out{\\n          opacity: 0;\\n          transition: opacity .25s;\\n          -webkit-animation: 0;\\n                  animation: 0;\\n        }\\n      ';\n                  }\n\n                  if (css.length === 0) {\n                    return;\n                  }\n\n                  css.innerHTML = innerCss;\n                  document.head.appendChild(css);\n                }\n              }]);\n\n              return Initializer;\n            }();\n\n            exports['default'] = Initializer;\n            var initializer = new Initializer();\n            exports.initializer = initializer;\n            /***/\n          },\n          /* 2 */\n\n          /***/\n          function (module, exports) {\n            /**\n             * Defaults & options\n             * @returns {object} Typed defaults & options\n             * @public\n             */\n            'use strict';\n\n            Object.defineProperty(exports, '__esModule', {\n              value: true\n            });\n            var defaults = {\n              /**\n               * @property {array} strings strings to be typed\n               * @property {string} stringsElement ID of element containing string children\n               */\n              strings: ['These are the default values...', 'You know what you should do?', 'Use your own!', 'Have a great day!'],\n              stringsElement: null,\n\n              /**\n               * @property {number} typeSpeed type speed in milliseconds\n               */\n              typeSpeed: 0,\n\n              /**\n               * @property {number} startDelay time before typing starts in milliseconds\n               */\n              startDelay: 0,\n\n              /**\n               * @property {number} backSpeed backspacing speed in milliseconds\n               */\n              backSpeed: 0,\n\n              /**\n               * @property {boolean} smartBackspace only backspace what doesn't match the previous string\n               */\n              smartBackspace: true,\n\n              /**\n               * @property {boolean} shuffle shuffle the strings\n               */\n              shuffle: false,\n\n              /**\n               * @property {number} backDelay time before backspacing in milliseconds\n               */\n              backDelay: 700,\n\n              /**\n               * @property {boolean} fadeOut Fade out instead of backspace\n               * @property {string} fadeOutClass css class for fade animation\n               * @property {boolean} fadeOutDelay Fade out delay in milliseconds\n               */\n              fadeOut: false,\n              fadeOutClass: 'typed-fade-out',\n              fadeOutDelay: 500,\n\n              /**\n               * @property {boolean} loop loop strings\n               * @property {number} loopCount amount of loops\n               */\n              loop: false,\n              loopCount: Infinity,\n\n              /**\n               * @property {boolean} showCursor show cursor\n               * @property {string} cursorChar character for cursor\n               * @property {boolean} autoInsertCss insert CSS for cursor and fadeOut into HTML <head>\n               */\n              showCursor: true,\n              cursorChar: '|',\n              autoInsertCss: true,\n\n              /**\n               * @property {string} attr attribute for typing\n               * Ex: input placeholder, value, or just HTML text\n               */\n              attr: null,\n\n              /**\n               * @property {boolean} bindInputFocusEvents bind to focus and blur if el is text input\n               */\n              bindInputFocusEvents: false,\n\n              /**\n               * @property {string} contentType 'html' or 'null' for plaintext\n               */\n              contentType: 'html',\n\n              /**\n               * All typing is complete\n               * @param {Typed} self\n               */\n              onComplete: function onComplete(self) {},\n\n              /**\n               * Before each string is typed\n               * @param {number} arrayPos\n               * @param {Typed} self\n               */\n              preStringTyped: function preStringTyped(arrayPos, self) {},\n\n              /**\n               * After each string is typed\n               * @param {number} arrayPos\n               * @param {Typed} self\n               */\n              onStringTyped: function onStringTyped(arrayPos, self) {},\n\n              /**\n               * During looping, after last string is typed\n               * @param {Typed} self\n               */\n              onLastStringBackspaced: function onLastStringBackspaced(self) {},\n\n              /**\n               * Typing has been stopped\n               * @param {number} arrayPos\n               * @param {Typed} self\n               */\n              onTypingPaused: function onTypingPaused(arrayPos, self) {},\n\n              /**\n               * Typing has been started after being stopped\n               * @param {number} arrayPos\n               * @param {Typed} self\n               */\n              onTypingResumed: function onTypingResumed(arrayPos, self) {},\n\n              /**\n               * After reset\n               * @param {Typed} self\n               */\n              onReset: function onReset(self) {},\n\n              /**\n               * After stop\n               * @param {number} arrayPos\n               * @param {Typed} self\n               */\n              onStop: function onStop(arrayPos, self) {},\n\n              /**\n               * After start\n               * @param {number} arrayPos\n               * @param {Typed} self\n               */\n              onStart: function onStart(arrayPos, self) {},\n\n              /**\n               * After destroy\n               * @param {Typed} self\n               */\n              onDestroy: function onDestroy(self) {}\n            };\n            exports['default'] = defaults;\n            module.exports = exports['default'];\n            /***/\n          },\n          /* 3 */\n\n          /***/\n          function (module, exports) {\n            /**\n             * TODO: These methods can probably be combined somehow\n             * Parse HTML tags & HTML Characters\n             */\n            'use strict';\n\n            Object.defineProperty(exports, '__esModule', {\n              value: true\n            });\n\n            var _createClass = function () {\n              function defineProperties(target, props) {\n                for (var i = 0; i < props.length; i++) {\n                  var descriptor = props[i];\n                  descriptor.enumerable = descriptor.enumerable || false;\n                  descriptor.configurable = true;\n                  if ('value' in descriptor) descriptor.writable = true;\n                  Object.defineProperty(target, descriptor.key, descriptor);\n                }\n              }\n\n              return function (Constructor, protoProps, staticProps) {\n                if (protoProps) defineProperties(Constructor.prototype, protoProps);\n                if (staticProps) defineProperties(Constructor, staticProps);\n                return Constructor;\n              };\n            }();\n\n            function _classCallCheck(instance, Constructor) {\n              if (!(instance instanceof Constructor)) {\n                throw new TypeError('Cannot call a class as a function');\n              }\n            }\n\n            var HTMLParser = function () {\n              function HTMLParser() {\n                _classCallCheck(this, HTMLParser);\n              }\n\n              _createClass(HTMLParser, [{\n                key: 'typeHtmlChars',\n\n                /**\n                 * Type HTML tags & HTML Characters\n                 * @param {string} curString Current string\n                 * @param {number} curStrPos Position in current string\n                 * @param {Typed} self instance of Typed\n                 * @returns {number} a new string position\n                 * @private\n                 */\n                value: function typeHtmlChars(curString, curStrPos, self) {\n                  if (self.contentType !== 'html') return curStrPos;\n                  var curChar = curString.substr(curStrPos).charAt(0);\n\n                  if (curChar === '<' || curChar === '&') {\n                    var endTag = '';\n\n                    if (curChar === '<') {\n                      endTag = '>';\n                    } else {\n                      endTag = ';';\n                    }\n\n                    while (curString.substr(curStrPos + 1).charAt(0) !== endTag) {\n                      curStrPos++;\n\n                      if (curStrPos + 1 > curString.length) {\n                        break;\n                      }\n                    }\n\n                    curStrPos++;\n                  }\n\n                  return curStrPos;\n                }\n                /**\n                 * Backspace HTML tags and HTML Characters\n                 * @param {string} curString Current string\n                 * @param {number} curStrPos Position in current string\n                 * @param {Typed} self instance of Typed\n                 * @returns {number} a new string position\n                 * @private\n                 */\n\n              }, {\n                key: 'backSpaceHtmlChars',\n                value: function backSpaceHtmlChars(curString, curStrPos, self) {\n                  if (self.contentType !== 'html') return curStrPos;\n                  var curChar = curString.substr(curStrPos).charAt(0);\n\n                  if (curChar === '>' || curChar === ';') {\n                    var endTag = '';\n\n                    if (curChar === '>') {\n                      endTag = '<';\n                    } else {\n                      endTag = '&';\n                    }\n\n                    while (curString.substr(curStrPos - 1).charAt(0) !== endTag) {\n                      curStrPos--;\n\n                      if (curStrPos < 0) {\n                        break;\n                      }\n                    }\n\n                    curStrPos--;\n                  }\n\n                  return curStrPos;\n                }\n              }]);\n\n              return HTMLParser;\n            }();\n\n            exports['default'] = HTMLParser;\n            var htmlParser = new HTMLParser();\n            exports.htmlParser = htmlParser;\n            /***/\n          }])\n        );\n      });\n\n      ;\n      /***/\n    },\n    /* 12 */\n\n    /***/\n    function (module, exports) {\n      module.exports = __WEBPACK_EXTERNAL_MODULE_12__;\n      /***/\n    }])\n  );\n});","map":null,"metadata":{},"sourceType":"script"}